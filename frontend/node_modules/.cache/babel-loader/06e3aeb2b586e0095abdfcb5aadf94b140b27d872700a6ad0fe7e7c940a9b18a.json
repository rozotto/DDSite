{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dmitry\\\\PycharmProjects\\\\GameWise_actually\\\\frontend\\\\src\\\\components\\\\Students.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\n//import './Students.css'; // необязательно, если у тебя есть стили\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Students = () => {\n  _s();\n  const [students, setStudents] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    const userObj = JSON.parse(storedUser);\n    if (!userObj.is_staff) {\n      navigate('/home');\n      return;\n    }\n    const fetchStudents = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/accounts/api/students/', {});\n        console.log(response);\n        if (!response.ok) {\n          throw new Error(`Ошибка HTTP: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Ответ от сервера:', data);\n        if (Array.isArray(data.students)) {\n          setStudents(data.students);\n        } else {\n          throw new Error('Неверный формат данных от сервера');\n        }\n      } catch (err) {\n        setError('Не удалось загрузить список учеников.');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchStudents();\n  }, [navigate]);\n  const handleStudentSelection = async (studentId, isSelected) => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/accounts/api/assign_student/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          student_id: studentId,\n          is_selected: isSelected\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка при закреплении ученика');\n      }\n\n      // Обновим состояние студентов, чтобы отобразить изменения\n      setStudents(prevStudents => prevStudents.map(student => student.id === studentId ? {\n        ...student,\n        isSelected\n      } : student));\n    } catch (err) {\n      setError('Не удалось закрепить ученика.');\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"students-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0443\\u0447\\u0435\\u043D\\u0438\\u043A\\u043E\\u0432\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this) : students.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"students-list\",\n        children: students.map(student => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"student-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: student.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this), \" \\u2014 \", student.email, /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: student.isSelected || false,\n            onChange: e => handleStudentSelection(student.id, e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 33\n          }, this)]\n        }, student.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0423\\u0447\\u0435\\u043D\\u0438\\u043A\\u0438 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u044B.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(Students, \"QJ2T/Dq1Fre58sOnAep8YOoDcc0=\", false, function () {\n  return [useNavigate];\n});\n_c = Students;\nexport default Students;\nvar _c;\n$RefreshReg$(_c, \"Students\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Navbar","Footer","jsxDEV","_jsxDEV","Students","_s","students","setStudents","error","setError","loading","setLoading","navigate","storedUser","localStorage","getItem","userObj","JSON","parse","is_staff","fetchStudents","response","fetch","console","log","ok","Error","status","data","json","Array","isArray","err","handleStudentSelection","studentId","isSelected","method","headers","body","stringify","student_id","is_selected","prevStudents","map","student","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","length","username","email","type","checked","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/Dmitry/PycharmProjects/GameWise_actually/frontend/src/components/Students.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\n//import './Students.css'; // необязательно, если у тебя есть стили\r\n\r\nconst Students = () => {\r\n    const [students, setStudents] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const storedUser = localStorage.getItem('user');\r\n\r\n\r\n        const userObj = JSON.parse(storedUser);\r\n\r\n        if (!userObj.is_staff) {\r\n            navigate('/home');\r\n            return;\r\n        }\r\n\r\n        const fetchStudents = async () => {\r\n            try {\r\n                const response = await fetch('http://127.0.0.1:8000/accounts/api/students/', {\r\n                });\r\n                console.log(response)\r\n                if (!response.ok) {\r\n                    throw new Error(`Ошибка HTTP: ${response.status}`);\r\n                }\r\n\r\n                const data = await response.json();\r\n                console.log('Ответ от сервера:', data);\r\n\r\n                if (Array.isArray(data.students)) {\r\n                    setStudents(data.students);\r\n                } else {\r\n                    throw new Error('Неверный формат данных от сервера');\r\n                }\r\n            } catch (err) {\r\n                setError('Не удалось загрузить список учеников.');\r\n                console.error(err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchStudents();\r\n    }, [navigate]);\r\n\r\n    const handleStudentSelection = async (studentId, isSelected) => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:8000/accounts/api/assign_student/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    student_id: studentId,\r\n                    is_selected: isSelected,\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Ошибка при закреплении ученика');\r\n            }\r\n\r\n            // Обновим состояние студентов, чтобы отобразить изменения\r\n            setStudents((prevStudents) =>\r\n                prevStudents.map((student) =>\r\n                    student.id === studentId ? { ...student, isSelected } : student\r\n                )\r\n            );\r\n        } catch (err) {\r\n            setError('Не удалось закрепить ученика.');\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"students-container\">\r\n            <Navbar />\r\n            <main>\r\n                <h2>Список учеников</h2>\r\n                {loading ? (\r\n                    <p>Загрузка...</p>\r\n                ) : error ? (\r\n                    <p style={{ color: 'red' }}>{error}</p>\r\n                ) : students.length > 0 ? (\r\n                    <ul className=\"students-list\">\r\n                        {students.map((student) => (\r\n                            <li key={student.id} className=\"student-item\">\r\n                                <strong>{student.username}</strong> — {student.email}\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={student.isSelected || false}\r\n                                    onChange={(e) =>\r\n                                        handleStudentSelection(student.id, e.target.checked)\r\n                                    }\r\n                                />\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p>Ученики не найдены.</p>\r\n                )}\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Students;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}