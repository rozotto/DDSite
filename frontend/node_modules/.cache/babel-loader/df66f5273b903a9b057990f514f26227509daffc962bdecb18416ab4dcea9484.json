{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dmitry\\\\PycharmProjects\\\\DDSite\\\\frontend\\\\src\\\\components\\\\Students.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\nimport './Students.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Students = () => {\n  _s();\n  const [students, setStudents] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    const userObj = JSON.parse(storedUser);\n    if (!(userObj !== null && userObj !== void 0 && userObj.is_staff)) {\n      navigate('/home');\n      return;\n    }\n    const fetchStudents = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:8000/accounts/api/students/?tutor_id=${userObj.id}`, {\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error(`Ошибка HTTP: ${response.status}`);\n        }\n        const data = await response.json();\n        if (Array.isArray(data.students)) {\n          // Добавляем проверку, выбран ли ученик другим админом\n          const studentsWithSelectionStatus = data.students.map(student => ({\n            ...student,\n            // Предполагаем, что сервер возвращает is_selected_by_other, если ученик уже выбран\n            isSelected: student.is_selected_by_current,\n            isSelectedByOther: student.is_selected_by_other\n          }));\n          setStudents(studentsWithSelectionStatus);\n        } else {\n          throw new Error('Неверный формат данных от сервера');\n        }\n      } catch (err) {\n        setError('Не удалось загрузить список учеников.');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchStudents();\n  }, [navigate]);\n  const handleStudentSelection = async (studentId, isSelected) => {\n    try {\n      const storedUser = localStorage.getItem('user');\n      const userObj = JSON.parse(storedUser);\n\n      // Проверяем, не выбран ли ученик другим админом\n      const student = students.find(s => s.id === studentId);\n      if (student.isSelectedByOther) {\n        setError('Этот ученик уже выбран другим преподавателем.');\n        return;\n      }\n      const response = await fetch('http://127.0.0.1:8000/accounts/api/assign_student/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          student_id: studentId,\n          tutor_id: userObj.id,\n          is_selected: isSelected\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка при обновлении ученика');\n      }\n      setStudents(prevStudents => prevStudents.map(student => student.id === studentId ? {\n        ...student,\n        isSelected\n      } : student));\n    } catch (err) {\n      setError('Не удалось закрепить ученика.');\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"students-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0443\\u0447\\u0435\\u043D\\u0438\\u043A\\u043E\\u0432\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this) : students.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"students-list\",\n        children: students.map(student => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"student-item\",\n          children: [student.email, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleStudentSelection(student.id, !student.isSelected),\n            style: {\n              marginLeft: '10px'\n            },\n            disabled: student.isSelected || student.isSelectedByOther,\n            children: student.isSelected ? 'ВЫБРАН ВАМИ' : student.isSelectedByOther ? 'ВЫБРАН ДРУГИМ' : 'ВЫБРАТЬ УЧЕНИКА'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 33\n          }, this)]\n        }, student.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0423\\u0447\\u0435\\u043D\\u0438\\u043A\\u0438 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u044B.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(Students, \"QJ2T/Dq1Fre58sOnAep8YOoDcc0=\", false, function () {\n  return [useNavigate];\n});\n_c = Students;\nexport default Students;\nvar _c;\n$RefreshReg$(_c, \"Students\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Navbar","Footer","jsxDEV","_jsxDEV","Students","_s","students","setStudents","error","setError","loading","setLoading","navigate","storedUser","localStorage","getItem","userObj","JSON","parse","is_staff","fetchStudents","response","fetch","id","credentials","ok","Error","status","data","json","Array","isArray","studentsWithSelectionStatus","map","student","isSelected","is_selected_by_current","isSelectedByOther","is_selected_by_other","err","console","handleStudentSelection","studentId","find","s","method","headers","body","stringify","student_id","tutor_id","is_selected","prevStudents","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","length","email","onClick","marginLeft","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Dmitry/PycharmProjects/DDSite/frontend/src/components/Students.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\nimport './Students.css';\r\n\r\nconst Students = () => {\r\n    const [students, setStudents] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const storedUser = localStorage.getItem('user');\r\n        const userObj = JSON.parse(storedUser);\r\n\r\n        if (!userObj?.is_staff) {\r\n            navigate('/home');\r\n            return;\r\n        }\r\n\r\n        const fetchStudents = async () => {\r\n            try {\r\n                const response = await fetch(`http://127.0.0.1:8000/accounts/api/students/?tutor_id=${userObj.id}`, {\r\n                    credentials: 'include',\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Ошибка HTTP: ${response.status}`);\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                if (Array.isArray(data.students)) {\r\n                    // Добавляем проверку, выбран ли ученик другим админом\r\n                    const studentsWithSelectionStatus = data.students.map(student => ({\r\n                        ...student,\r\n                        // Предполагаем, что сервер возвращает is_selected_by_other, если ученик уже выбран\r\n                        isSelected: student.is_selected_by_current,\r\n                        isSelectedByOther: student.is_selected_by_other\r\n                    }));\r\n                    setStudents(studentsWithSelectionStatus);\r\n                } else {\r\n                    throw new Error('Неверный формат данных от сервера');\r\n                }\r\n            } catch (err) {\r\n                setError('Не удалось загрузить список учеников.');\r\n                console.error(err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchStudents();\r\n    }, [navigate]);\r\n\r\n    const handleStudentSelection = async (studentId, isSelected) => {\r\n        try {\r\n            const storedUser = localStorage.getItem('user');\r\n            const userObj = JSON.parse(storedUser);\r\n\r\n            // Проверяем, не выбран ли ученик другим админом\r\n            const student = students.find(s => s.id === studentId);\r\n            if (student.isSelectedByOther) {\r\n                setError('Этот ученик уже выбран другим преподавателем.');\r\n                return;\r\n            }\r\n\r\n            const response = await fetch('http://127.0.0.1:8000/accounts/api/assign_student/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    student_id: studentId,\r\n                    tutor_id: userObj.id,\r\n                    is_selected: isSelected,\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Ошибка при обновлении ученика');\r\n            }\r\n\r\n            setStudents(prevStudents =>\r\n                prevStudents.map(student =>\r\n                    student.id === studentId\r\n                        ? { ...student, isSelected }\r\n                        : student\r\n                )\r\n            );\r\n        } catch (err) {\r\n            setError('Не удалось закрепить ученика.');\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"students-container\">\r\n            <Navbar />\r\n            <main>\r\n                <h2>Список учеников</h2>\r\n                {loading ? (\r\n                    <p>Загрузка...</p>\r\n                ) : error ? (\r\n                    <p style={{ color: 'red' }}>{error}</p>\r\n                ) : students.length > 0 ? (\r\n                    <ul className=\"students-list\">\r\n                        {students.map((student) => (\r\n                            <li key={student.id} className=\"student-item\">\r\n                                {student.email}\r\n                                <button\r\n                                    onClick={() =>\r\n                                        handleStudentSelection(student.id, !student.isSelected)\r\n                                    }\r\n                                    style={{ marginLeft: '10px' }}\r\n                                    disabled={student.isSelected || student.isSelectedByOther}\r\n                                >\r\n                                    {student.isSelected\r\n                                        ? 'ВЫБРАН ВАМИ'\r\n                                        : student.isSelectedByOther\r\n                                            ? 'ВЫБРАН ДРУГИМ'\r\n                                            : 'ВЫБРАТЬ УЧЕНИКА'}\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p>Ученики не найдены.</p>\r\n                )}\r\n            </main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Students;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}